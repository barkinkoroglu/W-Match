[
  {
    "section": "HTML",
    "questions": [
      {
        "question": "What does HTML stand for?",
        "a": "HyperText Markup Language",
        "b": "Hyper Technical Markup Language",
        "c": "HyperText Material Language",
        "d": "Hyper Technical Material Language",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "Which HTML tag is used to define a hyperlink?",
        "a": "<link>",
        "b": "<a>",
        "c": "<href>",
        "d": "<url>",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which tag is used to define a paragraph in HTML?",
        "a": "<paragraph>",
        "b": "<p>",
        "c": "<div>",
        "d": "<text>",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is the correct HTML element for inserting a line break?",
        "a": "<break>",
        "b": "<lb>",
        "c": "<br>",
        "d": "<newline>",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "Which of these elements are all table elements?",
        "a": "<table>, <thead>, <tbody>, <tfoot>, <tr>, <th>, <td>",
        "b": "<table>, <head>, <body>, <tfoot>, <row>, <header>, <data>",
        "c": "<table>, <header>, <body>, <footer>, <tr>, <th>, <td>",
        "d": "<table>, <caption>, <colgroup>, <col>, <tr>, <th>, <td>",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What does the 'alt' attribute in an <img> tag specify?",
        "a": "The source URL of the image",
        "b": "The width of the image in pixels",
        "c": "The height of the image in pixels",
        "d": "A description of the image for accessibility purposes",
        "correct": "d",
        "level": "normal"
      },
      {
        "question": "Which HTML element is used to specify a header for a document or section?",
        "a": "<header>",
        "b": "<head>",
        "c": "<h1>",
        "d": "<section>",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the correct HTML for making a drop-down list?",
        "a": "<list><option>Item 1</option><option>Item 2</option></list>",
        "b": "<select><option>Item 1</option><option>Item 2</option></select>",
        "c": "<dropdown><option>Item 1</option><option>Item 2</option></dropdown>",
        "d": "<menu><option>Item 1</option><option>Item 2</option></menu>",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "Which HTML attribute specifies an alternate text for an image if the image cannot be displayed?",
        "a": "src",
        "b": "title",
        "c": "alt",
        "d": "tooltip",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "Which input type defines a slider control?",
        "a": "range",
        "b": "slider",
        "c": "scroll",
        "d": "control",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the 'data-*' attribute in HTML?",
        "a": "To store custom data private to the page or application",
        "b": "To define the type of data stored in an element",
        "c": "To display additional information about an element",
        "d": "To define default values for input elements",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "Which HTML element is used to provide a caption for a figure?",
        "a": "<caption>",
        "b": "<figcaption>",
        "c": "<legend>",
        "d": "<label>",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "Which attribute is used to define the character encoding for an HTML document?",
        "a": "encoding",
        "b": "charset",
        "c": "character-set",
        "d": "language",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "Which attribute is used with the <ol> element to reverse the numbering order of the list?",
        "a": "order",
        "b": "reversed",
        "c": "start",
        "d": "count",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "Which of the following HTML elements can be used as a container for navigation links?",
        "a": "<nav>",
        "b": "<navigate>",
        "c": "<navbar>",
        "d": "<links>",
        "correct": "a",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "CSS",
    "questions": [
      {
        "question": "What does CSS stand for?",
        "a": "Computer Style Sheets",
        "b": "Cascading Style Sheets",
        "c": "Creative Style Sheets",
        "d": "Colorful Style Sheets",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which HTML attribute is used to define inline styles?",
        "a": "style",
        "b": "font",
        "c": "styles",
        "d": "color",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "Which property is used to change the font of an element?",
        "a": "font-style",
        "b": "font-family",
        "c": "text-style",
        "d": "text-family",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "How do you add a background color for all <h1> elements?",
        "a": "h1.all {background-color: #FFFFFF;}",
        "b": "h1 {background-color: #FFFFFF;}",
        "c": "all.h1 {background-color: #FFFFFF;}",
        "d": "h1.background {color: #FFFFFF;}",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which CSS property controls the text size?",
        "a": "text-size",
        "b": "font-size",
        "c": "text-style",
        "d": "font-style",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "How do you select an element with the ID 'demo'?",
        "a": ".demo",
        "b": "demo",
        "c": "#demo",
        "d": "*demo",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "How do you select elements with class name 'test'?",
        "a": "#test",
        "b": "test",
        "c": ".test",
        "d": "*test",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "What is the default value of the position property?",
        "a": "relative",
        "b": "absolute",
        "c": "fixed",
        "d": "static",
        "correct": "d",
        "level": "normal"
      },
      {
        "question": "Which property is used to set the spacing in between lines of text?",
        "a": "line-spacing",
        "b": "line-height",
        "c": "text-spacing",
        "d": "text-height",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "Which property is used to set the stack order of an element?",
        "a": "z-axis",
        "b": "x-index",
        "c": "z-index",
        "d": "stack-order",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "Which pseudo-class targets only the first child of an element?",
        "a": ":first-child",
        "b": ":last-child",
        "c": ":nth-child",
        "d": ":only-child",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "Which property specifies how an element should be rendered when it is too big for its container?",
        "a": "overflow",
        "b": "clip",
        "c": "size",
        "d": "resize",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "Which of these is NOT a valid value for the 'display' property?",
        "a": "block",
        "b": "inline",
        "c": "run-in",
        "d": "visible",
        "correct": "d",
        "level": "difficult"
      },
      {
        "question": "Which CSS property specifies the transparency of an element?",
        "a": "filter",
        "b": "visibility",
        "c": "transparency",
        "d": "opacity",
        "correct": "d",
        "level": "difficult"
      },
      {
        "question": "What does the 'vmin' unit represent?",
        "a": "1% of viewport width",
        "b": "1% of viewport height",
        "c": "The smallest value between viewport width and height",
        "d": "The largest value between viewport width and height",
        "correct": "c",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "JavaScript",
    "questions": [
      {
        "question": "What keyword is used to declare a variable in JavaScript?",
        "a": "var",
        "b": "let",
        "c": "const",
        "d": "set",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the result of the expression '2' + 2 in JavaScript?",
        "a": "22",
        "b": "4",
        "c": "NaN",
        "d": "undefined",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the result of the expression 'typeof []' in JavaScript?",
        "a": "'array'",
        "b": "'object'",
        "c": "'undefined'",
        "d": "'string'",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is the result of the expression '3 < 2' in JavaScript?",
        "a": "true",
        "b": "false",
        "c": "undefined",
        "d": "NaN",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is an example of a comparison operator in JavaScript?",
        "a": "&&",
        "b": "||",
        "c": "==",
        "d": "++",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "What is the difference between '==' and '===' in JavaScript?",
        "a": "'==' checks for value equality, while '===' checks for value and type equality",
        "b": "'===' checks for value equality, while '==' checks for value and type equality",
        "c": "'==' and '===' are interchangeable and have the same behavior",
        "d": "There is no difference between '==' and '==='",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the difference between 'let' and 'var' in JavaScript?",
        "a": "'let' is block-scoped, while 'var' is function-scoped",
        "b": "'var' is block-scoped, while 'let' is function-scoped",
        "c": "'let' and 'var' are interchangeable and have the same behavior",
        "d": "There is no difference between 'let' and 'var'",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the result of the expression 'typeof null' in JavaScript?",
        "a": "'object'",
        "b": "'null'",
        "c": "'undefined'",
        "d": "'boolean'",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is a closure in JavaScript?",
        "a": "A function that has access to variables in its outer scope",
        "b": "A type of loop that repeats a block of code a certain number of times",
        "c": "A method for converting strings to numbers in JavaScript",
        "d": "A way to declare variables without a specific type in JavaScript",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the 'this' keyword in JavaScript?",
        "a": "A reference to the current function or object",
        "b": "A keyword that declares a new variable",
        "c": "A keyword that specifies the access level of a property or method",
        "d": "A way to declare a class in JavaScript",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is a generator function in JavaScript?",
        "a": "A function that returns a sequence of values",
        "b": "A function that creates new objects based on a prototype",
        "c": "A function that can pause and resume its execution",
        "d": "A function that converts data types in JavaScript",
        "correct": "c",
        "level": "difficult"
      },
      {
        "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
        "a": "'null' is a value that represents the intentional absence of any object value, while 'undefined' is a value that represents an uninitialized, non-existent, or undefined value",
        "b": "'undefined' is a value that represents the intentional absence of any object value, while 'null' is a value that represents an uninitialized, non-existent, or undefined value",
        "c": "'null' and 'undefined' are interchangeable and have the same behavior",
        "d": "There is no difference between 'null' and 'undefined'",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is a pure function in JavaScript?",
        "a": "A function that has no side effects and always returns the same output for the same input",
        "b": "A function that modifies its input arguments",
        "c": "A function that can access variables outside its scope",
        "d": "A function that can cause side effects outside its scope",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the event loop in JavaScript?",
        "a": "A queue that manages the order in which functions are executed in JavaScript",
        "b": "A method for handling errors in JavaScript",
        "c": "A way to declare custom events in JavaScript",
        "d": "A method for creating animations in JavaScript",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the difference between 'call' and 'apply' in JavaScript?",
        "a": "'call' and 'apply' are interchangeable and have the same behavior",
        "b": "'call' is used to invoke a function with a given 'this' value and arguments provided as an array, while 'apply' is used to invoke a function with a given 'this' value and arguments provided individually",
        "c": "'apply' is used to invoke a function with a given 'this' value and arguments provided as an array, while 'call' is used to invoke a function with a given 'this' value and arguments provided individually",
        "d": "There is no difference between 'call' and 'apply'",
        "correct": "b",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "React",
    "questions": [
      {
        "question": "What is JSX in React?",
        "a": "A syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript",
        "b": "A JavaScript library for building user interfaces",
        "c": "A tool for compiling React code to browser-readable JavaScript",
        "d": "A module bundler for React applications",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is a component in React?",
        "a": "A small piece of reusable UI that can be composed with other components to build complex interfaces",
        "b": "A class or function that returns HTML-like code to be rendered on the page",
        "c": "A file that contains all the JavaScript and CSS needed for a single feature in your application",
        "d": "A database table that stores information about your application's users",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the state in React?",
        "a": "An object that contains data that can be used by a component or its children",
        "b": "A list of props passed down from a component's parent",
        "c": "A function that takes input and returns a UI element",
        "d": "An attribute that is used to style a component",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the virtual DOM in React?",
        "a": "A lightweight representation of the actual DOM that React uses to optimize updates and speed up rendering",
        "b": "A way to write CSS that is scoped to a single component in your React application",
        "c": "A way to create dynamic forms in React without writing any JavaScript",
        "d": "A tool for creating animations in React applications",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the difference between 'props' and 'state' in React?",
        "a": "'props' is used to pass data down from a parent component to a child component, while 'state' is used to manage internal component data",
        "b": "'state' is used to pass data down from a parent component to a child component, while 'props' is used to manage internal component data",
        "c": "'props' and 'state' are interchangeable and have the same behavior",
        "d": "There is no difference between 'props' and 'state'",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the 'key' prop in React and why is it important?",
        "a": "A special prop that is used to assign a unique identifier to a component when it is rendered in a list, to help React efficiently update the DOM when the list changes",
        "b": "A way to pass down functions from a parent component to a child component",
        "c": "A prop that is used to specify the CSS class to be applied to a component",
        "d": "A way to create reusable styles in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is a higher-order component (HOC) in React?",
        "a": "A function that takes a component and returns a new component with additional functionality",
        "b": "A component that is used to wrap other components and provide them with common functionality or state",
        "c": "A way to create dynamic forms in React without writing any JavaScript",
        "d": "A tool for creating animations in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the context API in React and when should you use it?",
        "a": "A way to share data between components without passing it down through props, useful for data that is needed by many components at different levels of the component tree",
        "b": "A way to declare custom events in React that can be used to communicate between components",
        "c": "A tool for managing asynchronous data fetching in React applications",
        "d": "A way to optimize the performance of React applications by reducing the number of re-renders",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is Redux and how does it work with React?",
        "a": "A state management library for JavaScript applications, used to manage complex or shared state in React applications",
        "b": "A testing framework for React applications, used to write unit tests for components",
        "c": "A tool for creating server-side rendering (SSR) of React applications",
        "d": "A way to create reusable components in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is server-side rendering (SSR) in React and why is it important?",
        "a": "A technique for rendering React components on the server, so that the initial page load is faster and more SEO-friendly",
        "b": "A way to optimize the performance of React applications by reducing the number of re-renders",
        "c": "A way to share data between components without passing it down through props",
        "d": "A tool for managing asynchronous data fetching in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the difference between server-side rendering (SSR) and client-side rendering (CSR) in React?",
        "a": "SSR renders components on the server and sends HTML to the browser, while CSR renders components in the browser using JavaScript",
        "b": "SSR is faster than CSR for complex applications, while CSR is faster for simple applications",
        "c": "SSR is more SEO-friendly than CSR, while CSR is better for dynamic content",
        "d": "There is no difference between SSR and CSR",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the difference between a controlled component and an uncontrolled component in React?",
        "a": "A controlled component is a component where the state is managed by React, while an uncontrolled component is a component where the state is managed by the DOM",
        "b": "A controlled component is a component that requires user input to update its state, while an uncontrolled component is a component that updates its state automatically",
        "c": "A controlled component is a component that is managed by Redux, while an uncontrolled component is a component that is not connected to Redux",
        "d": "There is no difference between a controlled component and an uncontrolled component",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the render prop pattern in React and how does it work?",
        "a": "A pattern where a component passes a function as a prop to another component, which then calls the function and returns its result as part of its own rendering",
        "b": "A pattern where a component passes its own rendering logic as a prop to another component, which then uses that logic to render itself",
        "c": "A pattern where a component renders multiple children using a loop or map function, passing down a prop to each child",
        "d": "A pattern where a component renders a list of items using a separate component for each item, passing down a prop to each component",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the difference between shallow rendering and full rendering in React testing?",
        "a": "Shallow rendering only renders a component and its direct children, while full rendering renders the entire component tree",
        "b": "Shallow rendering is faster than full rendering, but less accurate",
        "c": "Full rendering is useful for testing complex components, while shallow rendering is useful for testing simple components",
        "d": "There is no difference between shallow rendering and full rendering",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the React Fiber architecture and why was it developed?",
        "a": "A new reconciliation algorithm and rendering engine for React, developed to improve the performance and flexibility of the framework",
        "b": "A tool for generating documentation for React applications, using the JSDoc syntax",
        "c": "A library for writing unit tests for React components, developed by Facebook",
        "d": "A set of best practices for React development, developed by the React team at Facebook",
        "correct": "a",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "C#",
    "questions": [
      {
        "question": "What is C#?",
        "a": "A programming language developed by Microsoft",
        "b": "A style of programming that focuses on object-oriented design",
        "c": "A database management system",
        "d": "A framework for building web applications",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the syntax for declaring a variable in C#?",
        "a": "var variableName = value;",
        "b": "variableType variableName = value;",
        "c": "variableName = value;",
        "d": "value = variableName;",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is an array in C#?",
        "a": "A collection of elements of the same type",
        "b": "A loop construct used for iterating over a collection of elements",
        "c": "A class used for storing data in tabular format",
        "d": "A conditional statement used for making decisions",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the purpose of using namespaces in C#?",
        "a": "To organize code into logical groups and prevent naming conflicts",
        "b": "To specify the accessibility of a class or member",
        "c": "To define a set of rules and guidelines for writing code",
        "d": "To handle exceptions and errors in the code",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the main entry point for a C# console application?",
        "a": "Program.cs",
        "b": "Main.cs",
        "c": "EntryPoint.cs",
        "d": "App.cs",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the difference between value types and reference types in C#?",
        "a": "Value types are stored on the stack and directly contain the data, while reference types are stored on the heap and contain a reference to the data",
        "b": "Value types are used for storing small amounts of data, while reference types are used for storing larger data structures",
        "c": "Value types are immutable, while reference types are mutable",
        "d": "Value types are used for primitive data types, while reference types are used for custom objects",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the 'using' statement in C#?",
        "a": "To include a namespace in the current scope",
        "b": "To specify the type of a variable",
        "c": "To define a loop construct",
        "d": "To manage resources and ensure proper disposal",
        "correct": "d",
        "level": "normal"
      },
      {
        "question": "What are access modifiers in C#?",
        "a": "Keywords used to specify the accessibility of classes, methods, and other members",
        "b": "Operators used to control the flow of execution",
        "c": "Data types used for storing numeric values",
        "d": "Methods used for handling exceptions",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the difference between 'struct' and 'class' in C#?",
        "a": "'struct' is a value type and is stored on the stack, while 'class' is a reference type and is stored on the heap",
        "b": "'struct' is used for creating objects, while 'class' is used for defining methods",
        "c": "'struct' is immutable, while 'class' is mutable",
        "d": "'struct' is used for primitive data types, while 'class' is used for custom objects",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the 'async' and 'await' keywords in C#?",
        "a": "To create a new thread for executing a method",
        "b": "To handle exceptions in asynchronous code",
        "c": "To enable asynchronous programming and simplify working with tasks",
        "d": "To specify the access level of a class or member",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "What is the difference between 'readonly' and 'const' in C#?",
        "a": "'readonly' variables can be assigned a value at runtime, while 'const' variables must have a value assigned at compile-time",
        "b": "'readonly' variables can only be used within a specific scope, while 'const' variables have global scope",
        "c": "'readonly' variables can be changed after they are assigned a value, while 'const' variables cannot be modified",
        "d": "'readonly' variables are used for storing numeric values, while 'const' variables are used for strings and characters",
        "correct": "a",
        "level": "hard"
      },
      {
        "question": "What is a delegate in C#?",
        "a": "A reference type that can hold a reference to a method",
        "b": "A control structure used for repeating a block of code",
        "c": "A data structure used for storing key-value pairs",
        "d": "An interface used for defining properties and methods",
        "correct": "a",
        "level": "hard"
      },
      {
        "question": "What are extension methods in C#?",
        "a": "Methods that extend the functionality of a class without modifying its source code",
        "b": "Methods used for converting data types",
        "c": "Methods used for handling exceptions",
        "d": "Methods used for defining custom operators",
        "correct": "a",
        "level": "hard"
      },
      {
        "question": "What is the purpose of LINQ in C#?",
        "a": "To perform queries and transformations on collections of data",
        "b": "To define the structure and behavior of classes",
        "c": "To handle events and event-driven programming",
        "d": "To manage memory and resources in an efficient manner",
        "correct": "a",
        "level": "hard"
      },
      {
        "question": "What is the difference between 'IEnumerable' and 'IQueryable' in C#?",
        "a": "'IEnumerable' is used for working with in-memory collections, while 'IQueryable' is used for querying external data sources",
        "b": "'IEnumerable' allows for deferred execution, while 'IQueryable' supports querying with additional filtering and ordering capabilities",
        "c": "'IEnumerable' is a generic interface, while 'IQueryable' is a non-generic interface",
        "d": "'IEnumerable' is used for defining custom iterator methods, while 'IQueryable' is used for defining custom query providers",
        "correct": "b",
        "level": "hard"
      }
    ]
  }
]
