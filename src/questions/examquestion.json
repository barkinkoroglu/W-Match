[
  {
    "section": "HTML",
    "questions": [
      {
        "question": "What does HTML stand for?",
        "a": "HyperText Markup Language",
        "b": "Hyper Technical Markup Language",
        "c": "HyperText Material Language",
        "d": "Hyper Technical Material Language",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "Which HTML tag is used to define a hyperlink?",
        "a": "<link>",
        "b": "<a>",
        "c": "<href>",
        "d": "<url>",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which tag is used to define a paragraph in HTML?",
        "a": "<paragraph>",
        "b": "<p>",
        "c": "<div>",
        "d": "<text>",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is the correct HTML element for inserting a line break?",
        "a": "<break>",
        "b": "<lb>",
        "c": "<br>",
        "d": "<newline>",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "Which of these elements are all table elements?",
        "a": "<table>, <thead>, <tbody>, <tfoot>, <tr>, <th>, <td>",
        "b": "<table>, <head>, <body>, <tfoot>, <row>, <header>, <data>",
        "c": "<table>, <header>, <body>, <footer>, <tr>, <th>, <td>",
        "d": "<table>, <caption>, <colgroup>, <col>, <tr>, <th>, <td>",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What does the 'alt' attribute in an <img> tag specify?",
        "a": "The source URL of the image",
        "b": "The width of the image in pixels",
        "c": "The height of the image in pixels",
        "d": "A description of the image for accessibility purposes",
        "correct": "d",
        "level": "normal"
      },
      {
        "question": "Which HTML element is used to specify a header for a document or section?",
        "a": "<header>",
        "b": "<head>",
        "c": "<h1>",
        "d": "<section>",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the correct HTML for making a drop-down list?",
        "a": "<list><option>Item 1</option><option>Item 2</option></list>",
        "b": "<select><option>Item 1</option><option>Item 2</option></select>",
        "c": "<dropdown><option>Item 1</option><option>Item 2</option></dropdown>",
        "d": "<menu><option>Item 1</option><option>Item 2</option></menu>",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "Which HTML attribute specifies an alternate text for an image if the image cannot be displayed?",
        "a": "src",
        "b": "title",
        "c": "alt",
        "d": "tooltip",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "Which input type defines a slider control?",
        "a": "range",
        "b": "slider",
        "c": "scroll",
        "d": "control",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the 'data-*' attribute in HTML?",
        "a": "To store custom data private to the page or application",
        "b": "To define the type of data stored in an element",
        "c": "To display additional information about an element",
        "d": "To define default values for input elements",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "Which HTML element is used to provide a caption for a figure?",
        "a": "<caption>",
        "b": "<figcaption>",
        "c": "<legend>",
        "d": "<label>",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "Which attribute is used to define the character encoding for an HTML document?",
        "a": "encoding",
        "b": "charset",
        "c": "character-set",
        "d": "language",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "Which attribute is used with the <ol> element to reverse the numbering order of the list?",
        "a": "order",
        "b": "reversed",
        "c": "start",
        "d": "count",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "Which of the following HTML elements can be used as a container for navigation links?",
        "a": "<nav>",
        "b": "<navigate>",
        "c": "<navbar>",
        "d": "<links>",
        "correct": "a",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "CSS",
    "questions": [
      {
        "question": "What does CSS stand for?",
        "a": "Computer Style Sheets",
        "b": "Cascading Style Sheets",
        "c": "Creative Style Sheets",
        "d": "Colorful Style Sheets",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which HTML attribute is used to define inline styles?",
        "a": "style",
        "b": "font",
        "c": "styles",
        "d": "color",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "Which property is used to change the font of an element?",
        "a": "font-style",
        "b": "font-family",
        "c": "text-style",
        "d": "text-family",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "How do you add a background color for all <h1> elements?",
        "a": "h1.all {background-color: #FFFFFF;}",
        "b": "h1 {background-color: #FFFFFF;}",
        "c": "all.h1 {background-color: #FFFFFF;}",
        "d": "h1.background {color: #FFFFFF;}",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which CSS property controls the text size?",
        "a": "text-size",
        "b": "font-size",
        "c": "text-style",
        "d": "font-style",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "How do you select an element with the ID 'demo'?",
        "a": ".demo",
        "b": "demo",
        "c": "#demo",
        "d": "*demo",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "How do you select elements with class name 'test'?",
        "a": "#test",
        "b": "test",
        "c": ".test",
        "d": "*test",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "What is the default value of the position property?",
        "a": "relative",
        "b": "absolute",
        "c": "fixed",
        "d": "static",
        "correct": "d",
        "level": "normal"
      },
      {
        "question": "Which property is used to set the spacing in between lines of text?",
        "a": "line-spacing",
        "b": "line-height",
        "c": "text-spacing",
        "d": "text-height",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "Which property is used to set the stack order of an element?",
        "a": "z-axis",
        "b": "x-index",
        "c": "z-index",
        "d": "stack-order",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "Which pseudo-class targets only the first child of an element?",
        "a": ":first-child",
        "b": ":last-child",
        "c": ":nth-child",
        "d": ":only-child",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "Which property specifies how an element should be rendered when it is too big for its container?",
        "a": "overflow",
        "b": "clip",
        "c": "size",
        "d": "resize",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "Which of these is NOT a valid value for the 'display' property?",
        "a": "block",
        "b": "inline",
        "c": "run-in",
        "d": "visible",
        "correct": "d",
        "level": "difficult"
      },
      {
        "question": "Which CSS property specifies the transparency of an element?",
        "a": "filter",
        "b": "visibility",
        "c": "transparency",
        "d": "opacity",
        "correct": "d",
        "level": "difficult"
      },
      {
        "question": "What does the 'vmin' unit represent?",
        "a": "1% of viewport width",
        "b": "1% of viewport height",
        "c": "The smallest value between viewport width and height",
        "d": "The largest value between viewport width and height",
        "correct": "c",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "JavaScript",
    "questions": [
      {
        "question": "What keyword is used to declare a variable in JavaScript?",
        "a": "var",
        "b": "let",
        "c": "const",
        "d": "set",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the result of the expression '2' + 2 in JavaScript?",
        "a": "22",
        "b": "4",
        "c": "NaN",
        "d": "undefined",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the result of the expression 'typeof []' in JavaScript?",
        "a": "'array'",
        "b": "'object'",
        "c": "'undefined'",
        "d": "'string'",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is the result of the expression '3 < 2' in JavaScript?",
        "a": "true",
        "b": "false",
        "c": "undefined",
        "d": "NaN",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is an example of a comparison operator in JavaScript?",
        "a": "&&",
        "b": "||",
        "c": "==",
        "d": "++",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "What is the difference between '==' and '===' in JavaScript?",
        "a": "'==' checks for value equality, while '===' checks for value and type equality",
        "b": "'===' checks for value equality, while '==' checks for value and type equality",
        "c": "'==' and '===' are interchangeable and have the same behavior",
        "d": "There is no difference between '==' and '==='",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the difference between 'let' and 'var' in JavaScript?",
        "a": "'let' is block-scoped, while 'var' is function-scoped",
        "b": "'var' is block-scoped, while 'let' is function-scoped",
        "c": "'let' and 'var' are interchangeable and have the same behavior",
        "d": "There is no difference between 'let' and 'var'",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the result of the expression 'typeof null' in JavaScript?",
        "a": "'object'",
        "b": "'null'",
        "c": "'undefined'",
        "d": "'boolean'",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is a closure in JavaScript?",
        "a": "A function that has access to variables in its outer scope",
        "b": "A type of loop that repeats a block of code a certain number of times",
        "c": "A method for converting strings to numbers in JavaScript",
        "d": "A way to declare variables without a specific type in JavaScript",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the 'this' keyword in JavaScript?",
        "a": "A reference to the current function or object",
        "b": "A keyword that declares a new variable",
        "c": "A keyword that specifies the access level of a property or method",
        "d": "A way to declare a class in JavaScript",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is a generator function in JavaScript?",
        "a": "A function that returns a sequence of values",
        "b": "A function that creates new objects based on a prototype",
        "c": "A function that can pause and resume its execution",
        "d": "A function that converts data types in JavaScript",
        "correct": "c",
        "level": "difficult"
      },
      {
        "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
        "a": "'null' is a value that represents the intentional absence of any object value, while 'undefined' is a value that represents an uninitialized, non-existent, or undefined value",
        "b": "'undefined' is a value that represents the intentional absence of any object value, while 'null' is a value that represents an uninitialized, non-existent, or undefined value",
        "c": "'null' and 'undefined' are interchangeable and have the same behavior",
        "d": "There is no difference between 'null' and 'undefined'",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is a pure function in JavaScript?",
        "a": "A function that has no side effects and always returns the same output for the same input",
        "b": "A function that modifies its input arguments",
        "c": "A function that can access variables outside its scope",
        "d": "A function that can cause side effects outside its scope",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the event loop in JavaScript?",
        "a": "A queue that manages the order in which functions are executed in JavaScript",
        "b": "A method for handling errors in JavaScript",
        "c": "A way to declare custom events in JavaScript",
        "d": "A method for creating animations in JavaScript",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the difference between 'call' and 'apply' in JavaScript?",
        "a": "'call' and 'apply' are interchangeable and have the same behavior",
        "b": "'call' is used to invoke a function with a given 'this' value and arguments provided as an array, while 'apply' is used to invoke a function with a given 'this' value and arguments provided individually",
        "c": "'apply' is used to invoke a function with a given 'this' value and arguments provided as an array, while 'call' is used to invoke a function with a given 'this' value and arguments provided individually",
        "d": "There is no difference between 'call' and 'apply'",
        "correct": "b",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "React",
    "questions": [
      {
        "question": "What is JSX in React?",
        "a": "A syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript",
        "b": "A JavaScript library for building user interfaces",
        "c": "A tool for compiling React code to browser-readable JavaScript",
        "d": "A module bundler for React applications",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is a component in React?",
        "a": "A small piece of reusable UI that can be composed with other components to build complex interfaces",
        "b": "A class or function that returns HTML-like code to be rendered on the page",
        "c": "A file that contains all the JavaScript and CSS needed for a single feature in your application",
        "d": "A database table that stores information about your application's users",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the state in React?",
        "a": "An object that contains data that can be used by a component or its children",
        "b": "A list of props passed down from a component's parent",
        "c": "A function that takes input and returns a UI element",
        "d": "An attribute that is used to style a component",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the virtual DOM in React?",
        "a": "A lightweight representation of the actual DOM that React uses to optimize updates and speed up rendering",
        "b": "A way to write CSS that is scoped to a single component in your React application",
        "c": "A way to create dynamic forms in React without writing any JavaScript",
        "d": "A tool for creating animations in React applications",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the difference between 'props' and 'state' in React?",
        "a": "'props' is used to pass data down from a parent component to a child component, while 'state' is used to manage internal component data",
        "b": "'state' is used to pass data down from a parent component to a child component, while 'props' is used to manage internal component data",
        "c": "'props' and 'state' are interchangeable and have the same behavior",
        "d": "There is no difference between 'props' and 'state'",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the 'key' prop in React and why is it important?",
        "a": "A special prop that is used to assign a unique identifier to a component when it is rendered in a list, to help React efficiently update the DOM when the list changes",
        "b": "A way to pass down functions from a parent component to a child component",
        "c": "A prop that is used to specify the CSS class to be applied to a component",
        "d": "A way to create reusable styles in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is a higher-order component (HOC) in React?",
        "a": "A function that takes a component and returns a new component with additional functionality",
        "b": "A component that is used to wrap other components and provide them with common functionality or state",
        "c": "A way to create dynamic forms in React without writing any JavaScript",
        "d": "A tool for creating animations in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the context API in React and when should you use it?",
        "a": "A way to share data between components without passing it down through props, useful for data that is needed by many components at different levels of the component tree",
        "b": "A way to declare custom events in React that can be used to communicate between components",
        "c": "A tool for managing asynchronous data fetching in React applications",
        "d": "A way to optimize the performance of React applications by reducing the number of re-renders",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is Redux and how does it work with React?",
        "a": "A state management library for JavaScript applications, used to manage complex or shared state in React applications",
        "b": "A testing framework for React applications, used to write unit tests for components",
        "c": "A tool for creating server-side rendering (SSR) of React applications",
        "d": "A way to create reusable components in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is server-side rendering (SSR) in React and why is it important?",
        "a": "A technique for rendering React components on the server, so that the initial page load is faster and more SEO-friendly",
        "b": "A way to optimize the performance of React applications by reducing the number of re-renders",
        "c": "A way to share data between components without passing it down through props",
        "d": "A tool for managing asynchronous data fetching in React applications",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the difference between server-side rendering (SSR) and client-side rendering (CSR) in React?",
        "a": "SSR renders components on the server and sends HTML to the browser, while CSR renders components in the browser using JavaScript",
        "b": "SSR is faster than CSR for complex applications, while CSR is faster for simple applications",
        "c": "SSR is more SEO-friendly than CSR, while CSR is better for dynamic content",
        "d": "There is no difference between SSR and CSR",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the difference between a controlled component and an uncontrolled component in React?",
        "a": "A controlled component is a component where the state is managed by React, while an uncontrolled component is a component where the state is managed by the DOM",
        "b": "A controlled component is a component that requires user input to update its state, while an uncontrolled component is a component that updates its state automatically",
        "c": "A controlled component is a component that is managed by Redux, while an uncontrolled component is a component that is not connected to Redux",
        "d": "There is no difference between a controlled component and an uncontrolled component",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the render prop pattern in React and how does it work?",
        "a": "A pattern where a component passes a function as a prop to another component, which then calls the function and returns its result as part of its own rendering",
        "b": "A pattern where a component passes its own rendering logic as a prop to another component, which then uses that logic to render itself",
        "c": "A pattern where a component renders multiple children using a loop or map function, passing down a prop to each child",
        "d": "A pattern where a component renders a list of items using a separate component for each item, passing down a prop to each component",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the difference between shallow rendering and full rendering in React testing?",
        "a": "Shallow rendering only renders a component and its direct children, while full rendering renders the entire component tree",
        "b": "Shallow rendering is faster than full rendering, but less accurate",
        "c": "Full rendering is useful for testing complex components, while shallow rendering is useful for testing simple components",
        "d": "There is no difference between shallow rendering and full rendering",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the React Fiber architecture and why was it developed?",
        "a": "A new reconciliation algorithm and rendering engine for React, developed to improve the performance and flexibility of the framework",
        "b": "A tool for generating documentation for React applications, using the JSDoc syntax",
        "c": "A library for writing unit tests for React components, developed by Facebook",
        "d": "A set of best practices for React development, developed by the React team at Facebook",
        "correct": "a",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "Java",
    "questions": [
      {
        "question": "What is the correct syntax to declare a variable in Java?",
        "a": "int x;",
        "b": "x = 5;",
        "c": "int x = 5;",
        "d": "variable x;",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "Which of the following is a valid identifier in Java?",
        "a": "123abc",
        "b": "_abc",
        "c": "$abc",
        "d": "abc-123",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "What is the output of the following code?\n\n```\nint x = 5;\nSystem.out.println(x++);\n```",
        "a": "5",
        "b": "6",
        "c": "Compilation error",
        "d": "Runtime error",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the purpose of the `static` keyword in Java?",
        "a": "To create multiple instances of a class",
        "b": "To define a class as abstract",
        "c": "To indicate that a method or variable belongs to the class and not to an instance of the class",
        "d": "To prevent inheritance from a class",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "Which of the following is NOT a primitive data type in Java?",
        "a": "int",
        "b": "float",
        "c": "boolean",
        "d": "String",
        "correct": "d",
        "level": "easy"
      },
      {
        "question": "What is the difference between `ArrayList` and `LinkedList` in Java?",
        "a": "`ArrayList` is implemented as a resizable array, while `LinkedList` is implemented as a doubly linked list.",
        "b": "`ArrayList` is more efficient for accessing elements by index, while `LinkedList` is more efficient for adding and removing elements.",
        "c": "`ArrayList` can only store objects of a specific type, while `LinkedList` can store objects of different types.",
        "d": "`ArrayList` and `LinkedList` are equivalent and can be used interchangeably.",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "What is the output of the following code?\n\n```\nint x = 10;\nSystem.out.println(x > 5 ? \"Hello\" : \"Goodbye\");\n```",
        "a": "Hello",
        "b": "Goodbye",
        "c": "10",
        "d": "Compilation error",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the `final` keyword in Java?",
        "a": "To indicate that a variable cannot be changed once assigned a value",
        "b": "To indicate that a method cannot be overridden in a subclass",
        "c": "To indicate that a class cannot be inherited",
        "d": "To indicate that an exception must be caught or declared",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the difference between `String`, `StringBuilder`, and `StringBuffer` in Java?",
        "a": "`String` is immutable, while `StringBuilder` and `StringBuffer` are mutable.",
        "b": "`String` is synchronized, while `StringBuilder` and `StringBuffer` are not.",
        "c": "`StringBuilder` and `StringBuffer` are more efficient for concatenating strings than `String`.",
        "d": "All of the above",
        "correct": "d",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the `equals()` method in Java?",
        "a": "To compare two objects for reference equality",
        "b": "To compare two objects for value equality",
        "c": "To convert a string to uppercase",
        "d": "To concatenate two strings",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "What is the difference between checked exceptions and unchecked exceptions in Java?",
        "a": "Checked exceptions are checked at compile-time and must be handled or declared, while unchecked exceptions do not need to be handled or declared.",
        "b": "Checked exceptions are more severe than unchecked exceptions.",
        "c": "Checked exceptions can be caught using a `try-catch` block, while unchecked exceptions cannot.",
        "d": "Checked exceptions are only thrown by methods in the Java standard library.",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the output of the following code?\n\n```\nint x = 5;\nSystem.out.println(x++);\n```",
        "a": "5",
        "b": "6",
        "c": "Compilation error",
        "d": "Runtime error",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `transient` keyword in Java?",
        "a": "To indicate that a variable should not be serialized",
        "b": "To indicate that a method should not be overridden",
        "c": "To indicate that a class cannot be extended",
        "d": "To indicate that a method should be implemented by a subclass",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the difference between `HashMap` and `Hashtable` in Java?",
        "a": "`HashMap` allows `null` values and is not synchronized, while `Hashtable` does not allow `null` values and is synchronized.",
        "b": "`HashMap` is faster than `Hashtable` for most operations.",
        "c": "`Hashtable` is a legacy class and should not be used in new code.",
        "d": "All of the above",
        "correct": "d",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `@Override` annotation in Java?",
        "a": "To indicate that a method is overridden from a superclass",
        "b": "To indicate that a method is final and cannot be overridden",
        "c": "To indicate that a variable is constant and cannot be changed",
        "d": "To indicate that a class is a subclass of another class",
        "correct": "a",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "Python",
    "questions": [
      {
        "question": "What is the correct way to declare a variable in Python?",
        "a": "var x = 5",
        "b": "let x = 5",
        "c": "x = 5",
        "d": "int x = 5",
        "correct": "c",
        "level": "easy"
      },
      {
        "question": "What is the output of the following code?\n\n```\nprint(2 + 2 * 3)\n```",
        "a": "8",
        "b": "10",
        "c": "12",
        "d": "14",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which of the following is not a valid data type in Python?",
        "a": "int",
        "b": "float",
        "c": "string",
        "d": "boolean",
        "correct": "d",
        "level": "easy"
      },
      {
        "question": "What is the purpose of the `len()` function in Python?",
        "a": "To calculate the length of a string",
        "b": "To convert a value to an integer",
        "c": "To check if a variable is defined",
        "d": "To generate random numbers",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "Which of the following is the correct way to comment a single line in Python?",
        "a": "// This is a comment",
        "b": "# This is a comment",
        "c": "/* This is a comment */",
        "d": "<!-- This is a comment -->",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is the result of the following code?\n\n```\nmy_list = [1, 2, 3]\nprint(my_list[1])\n```",
        "a": "1",
        "b": "2",
        "c": "3",
        "d": "Error",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "Which of the following methods can be used to remove an element from a list in Python?",
        "a": "remove()",
        "b": "delete()",
        "c": "pop()",
        "d": "exclude()",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the output of the following code?\n\n```\nx = [1, 2, 3]\ny = x\nx.append(4)\nprint(y)\n```",
        "a": "[1, 2, 3, 4]",
        "b": "[1, 2, 3]",
        "c": "[4]",
        "d": "Error",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the `range()` function in Python?",
        "a": "To iterate over a sequence of numbers",
        "b": "To generate random numbers",
        "c": "To check if a variable is defined",
        "d": "To convert a value to a string",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "Which of the following statements is true about Python's `for` loop?",
        "a": "It can only iterate over numbers",
        "b": "It can only iterate over strings",
        "c": "It can iterate over any iterable object",
        "d": "It can iterate over a specific range of values",
        "correct": "c",
        "level": "normal"
      },
      {
        "question": "What is the result of the following code?\n\n```\ndef my_function(x):\n    if x <= 1:\n        return 1\n    else:\n        return x * my_function(x - 1)\n\nprint(my_function(5))\n```",
        "a": "5",
        "b": "10",
        "c": "15",
        "d": "120",
        "correct": "d",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `__init__` method in a Python class?",
        "a": "To initialize the class attributes",
        "b": "To define the class methods",
        "c": "To create an instance of the class",
        "d": "To destroy an instance of the class",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "Which of the following is true about Python's global variables?",
        "a": "They can be accessed only within the function where they are defined",
        "b": "They can be accessed from any function or module",
        "c": "They can be accessed only within the module where they are defined",
        "d": "They can be accessed only within the class where they are defined",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "What is the output of the following code?\n\n```\ndef my_function():\n    x = 10\n    def inner_function():\n        nonlocal x\n        x += 5\n    inner_function()\n    return x\n\nprint(my_function())\n```",
        "a": "10",
        "b": "15",
        "c": "20",
        "d": "Error",
        "correct": "c",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `yield` keyword in Python?",
        "a": "To define a generator function",
        "b": "To exit a loop or function",
        "c": "To raise an exception",
        "d": "To create a decorator",
        "correct": "a",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "PHP",
    "questions": [
      {
        "question": "What does PHP stand for?",
        "a": "Personal Hypertext Processor",
        "b": "PHP: Hypertext Preprocessor",
        "c": "Private Home Page",
        "d": "Public Hosting Platform",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which of the following is NOT a PHP data type?",
        "a": "String",
        "b": "Integer",
        "c": "Float",
        "d": "Boolean",
        "correct": "d",
        "level": "easy"
      },
      {
        "question": "How do you concatenate two strings in PHP?",
        "a": "Using the `+` operator",
        "b": "Using the `.` operator",
        "c": "Using the `&` operator",
        "d": "Using the `=` operator",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "What is the correct way to start a PHP block of code?",
        "a": "&lt;php&gt;",
        "b": "&lt;?php",
        "c": "&lt;?php&gt;",
        "d": "&lt;?ph",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which of the following is used to comment a single line in PHP?",
        "a": "//",
        "b": "#",
        "c": "--",
        "d": "/* */",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the difference between `include` and `require` in PHP?",
        "a": "`include` will only produce a warning if the file is not found, while `require` will produce a fatal error",
        "b": "`include` and `require` are interchangeable and can be used interchangeably",
        "c": "`include` is used for including PHP files, while `require` is used for including non-PHP files",
        "d": "`include` and `require` both behave the same way and have the same error handling",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the difference between single quotes (`'`) and double quotes (`\"`) in PHP?",
        "a": "Single quotes do not parse variables or special characters, while double quotes do",
        "b": "Double quotes do not parse variables or special characters, while single quotes do",
        "c": "There is no difference between single quotes and double quotes in PHP",
        "d": "Single quotes are used for strings, while double quotes are used for characters",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the `echo` statement used for in PHP?",
        "a": "To output data to the web page",
        "b": "To define a constant",
        "c": "To declare a variable",
        "d": "To include another PHP file",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the `$_SESSION` superglobal in PHP?",
        "a": "To store and retrieve session-specific data",
        "b": "To access server-specific information",
        "c": "To handle file uploads",
        "d": "To encrypt and decrypt data",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the correct way to check if a variable is set in PHP?",
        "a": "Using the `isset()` function",
        "b": "Using the `empty()` function",
        "c": "Using the `is_null()` function",
        "d": "Using the `is_set()` function",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of namespaces in PHP?",
        "a": "To avoid naming conflicts between classes, functions, and variables",
        "b": "To improve the performance of PHP scripts",
        "c": "To provide a way to organize and group related classes and functions",
        "d": "To enable automatic loading of PHP classes",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What are traits in PHP and how are they used?",
        "a": "Traits are a mechanism for code reuse in single inheritance languages like PHP",
        "b": "Traits are used to define interfaces for classes",
        "c": "Traits are used to create abstract classes",
        "d": "Traits are used to implement multiple inheritance in PHP",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `spl_autoload_register` function in PHP?",
        "a": "To register a function that will be called automatically when a class is undefined",
        "b": "To load PHP extensions dynamically",
        "c": "To register a function that will be called automatically when a script is included or required",
        "d": "To enable the use of namespaces in PHP",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the use of the `__toString` magic method in PHP?",
        "a": "To convert an object to a string when it is treated as a string",
        "b": "To override the behavior of the `echo` statement for an object",
        "c": "To convert an object to an array when it is treated as an array",
        "d": "To enable method chaining for an object",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `final` keyword in PHP?",
        "a": "To prevent a class from being extended or overridden",
        "b": "To indicate that a class or method is abstract",
        "c": "To define a constant",
        "d": "To enable static binding in PHP",
        "correct": "a",
        "level": "difficult"
      }
    ]
  },
  {
    "section": "Ruby",
    "questions": [
      {
        "question": "What is the syntax for defining a method in Ruby?",
        "a": "def method_name",
        "b": "function method_name",
        "c": "define method_name",
        "d": "method method_name",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the output of the following code?\n\n```\nx = 5\nputs x + 2\n```",
        "a": "7",
        "b": "5",
        "c": "2",
        "d": "Compilation error",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the symbol used to represent a line comment in Ruby?",
        "a": "//",
        "b": "#",
        "c": "--",
        "d": "//",
        "correct": "b",
        "level": "easy"
      },
      {
        "question": "Which of the following is a valid way to create an empty array in Ruby?",
        "a": "array = []",
        "b": "array = {}",
        "c": "array = ()",
        "d": "array = ''",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What does the `puts` method do in Ruby?",
        "a": "Prints the output to the console with a new line",
        "b": "Performs a mathematical calculation",
        "c": "Defines a new class",
        "d": "Reads input from the user",
        "correct": "a",
        "level": "easy"
      },
      {
        "question": "What is the difference between `puts` and `print` in Ruby?",
        "a": "`puts` adds a new line after printing, while `print` does not",
        "b": "`print` adds a new line after printing, while `puts` does not",
        "c": "`puts` prints the output to the console, while `print` returns a value",
        "d": "`print` prints the output to the console, while `puts` returns a value",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the output of the following code?\n\n```\nputs 'Hello'.reverse\n```",
        "a": "'olleH'",
        "b": "'Hello'",
        "c": "Error",
        "d": "Compilation error",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What does the `%w` notation do in Ruby?",
        "a": "Creates an array of strings, with each string delimited by spaces",
        "b": "Creates an array of symbols, with each symbol delimited by spaces",
        "c": "Creates an array of numbers, with each number delimited by spaces",
        "d": "Creates an array of words, with each word delimited by spaces",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is the purpose of the `elsif` statement in Ruby?",
        "a": "To define a new method",
        "b": "To handle multiple conditions in an `if` statement",
        "c": "To loop through a collection",
        "d": "To raise an exception",
        "correct": "b",
        "level": "normal"
      },
      {
        "question": "What is the result of the following code?\n\n```\n5.times do |i|\n  puts i\nend\n```",
        "a": "0\n1\n2\n3\n4",
        "b": "1\n2\n3\n4\n5",
        "c": "0\n1\n2\n3\n4\n5",
        "d": "1\n2\n3\n4",
        "correct": "a",
        "level": "normal"
      },
      {
        "question": "What is a lambda in Ruby?",
        "a": "A block of code that can be passed around and executed later",
        "b": "A data structure that stores key-value pairs",
        "c": "A method that can be called without an object",
        "d": "A loop construct for iterating over a collection",
        "correct": "a",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `yield` keyword in Ruby?",
        "a": "To end the execution of a method",
        "b": "To pass control from a method to a block",
        "c": "To define a local variable",
        "d": "To raise an exception",
        "correct": "b",
        "level": "difficult"
      },
      {
        "question": "What is the difference between `include` and `extend` in Ruby?",
        "a": "`include` is used to mix in instance methods, while `extend` is used to mix in class methods",
        "b": "`include` is used to mix in class methods, while `extend` is used to mix in instance methods",
        "c": "`include` is used to mix in instance methods, while `extend` is used to mix in module methods",
        "d": "`include` is used to mix in module methods, while `extend` is used to mix in instance methods",
        "correct": "c",
        "level": "difficult"
      },
      {
        "question": "What is the purpose of the `super` keyword in Ruby?",
        "a": "To call the parent class constructor",
        "b": "To exit the current block of code",
        "c": "To define a subclass",
        "d": "To invoke the method of the same name in the parent class",
        "correct": "d",
        "level": "difficult"
      },
      {
        "question": "What is the result of the following code?\n\n```\ndef foo(a, b, *c)\n  puts a\n  puts b\n  puts c.inspect\nend\n\nfoo(1, 2, 3, 4, 5)\n```",
        "a": "1\n2\n[3, 4, 5]",
        "b": "1\n2\n[3]",
        "c": "1\n2\n[4, 5]",
        "d": "Error",
        "correct": "a",
        "level": "difficult"
      }
    ]
  }
]
